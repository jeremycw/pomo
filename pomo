#!/usr/bin/env ruby

require 'time'
require 'optparse'

def print_history(logfile)
  today = 0
  week = 0
  File.readlines(logfile).each do |line|
    tokens = line.split(/\s+/)
    time = DateTime.iso8601(tokens[0])
    today += 1 if time.to_date == Date.today
    week += 1 if time.to_date.cweek == Date.today.cweek
  end
  puts "Pomodoros completed today: #{today}"
  puts "Pomodoros completed this week: #{week}"
end

def end_pomodoro(logfile)
  print "Finished pomodoro. Enter what you worked on: "
  open(logfile, 'a') { |f| f.puts "#{Time.now.utc.iso8601} #{gets}" }
  print_history(logfile)
end

state = :work

options = {
  long_break_interval: 4,
  long_break_minutes: 15,
  break_minutes: 5,
  work_minutes: 25,
  logfile: 'pomo.log',
  history: false,
  auto_break: false
}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: pomo [options]"

  opts.on("-h", "--help", "Display this message") do |l|
    puts opts
    exit
  end
  opts.on("-w", "--work-minutes N", "N minutes for each pomodoro (default 25)") do |w|
    options[:work_minutes] = Integer(w)
  end
  opts.on("-s", "--break-minutes N", "N minutes for standard breaks (default 5)") do |b|
    options[:break_minutes] = Integer(b)
  end
  opts.on("-b", "--long-break-minutes N", "N minutes for long breaks (default 15)") do |l|
    options[:long_break_minutes] = Integer(l)
  end
  opts.on("-i", "--long-break-interval N", "Complete N pomodoros to get a long break (default 4)") do |i|
    options[:long_break_interval] = Integer(i)
  end
  opts.on("-l", "--logfile FILE", "Path to logfile") do |l|
    options[:logfile] = l.to_i
  end
  opts.on("-a", "--auto-break", "Start break timer as soon as work timer completes") do |l|
    options[:auto_break] = l
  end
  opts.on("--history", "Print historical statistics and information") do |o|
    options[:history] = o
  end
end

begin
  opts.parse!
rescue
  puts opts
  exit
end

trap "SIGINT" do
  system("printf '\033kpomo\033\\'")
  puts ""
  exit 130
end

if options[:history]
  print_history(options[:logfile])
  exit
end

completed_today = 0
File.readlines(options[:logfile]).each do |line|
  tokens = line.split(/\s+/)
  time = DateTime.iso8601(tokens[0])
  completed_today += 1 if time.to_date == Date.today
end
run = completed_today % options[:long_break_interval]
seconds = options[:work_minutes] * 60

loop do
  seconds.times do
    seconds -= 1 
    prefix = state == :work ? "work" : "break"
    window_string = sprintf("%s %d:%02d", prefix, seconds / 60, seconds % 60)
    system("printf '\033k#{window_string}\033\\'")
    sleep(1)
  end
  if state == :work
    run += 1
    system("terminal-notifier -message 'Work time is up' -title Pomo")
    if run == options[:long_break_interval]
      state = :long_break
      seconds = options[:long_break_minutes] * 60
      run = 0
    else
      seconds = options[:break_minutes] * 60
      state = :break
    end
    if (!options[:auto_break])
      end_pomodoro(options[:logfile])
    end
  else
    system("terminal-notifier -message 'Break time is up' -title Pomo")
    state = :work
    seconds = options[:work_minutes] * 60
    if (options[:auto_break])
      end_pomodoro(options[:logfile])
    else
      print "Finished break. Hit return to continue..."
      gets
    end
  end
end
